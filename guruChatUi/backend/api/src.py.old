import datetime
import json
import os, urllib, requests

from django.template import loader
from django.utils.timezone import utc
from random import random
from .models import Message, Conversation
from django.conf import settings

BASE_DIR = settings.BASE_DIR

tableDataPath = os.path.join(BASE_DIR, "api/table_sample.json")
SAMPLE_TABLE_DATA = json.loads(open(tableDataPath, "r").read())
URL = 'http://144.76.48.157:8020/search?query="%s"&source=api'

assertions = ["Here is what i found",
              "Check it out",
              "I found this for you",
              "Here is what i found",
              "Check it out",
              "I found this for you"]

negatives = ["I did not found anything related",
             "I can not understand what you are saying",
             "Unable to get what you asked",
             "I did not found anything related",
             "I can not understand what you are saying",
             "Unable to get what you asked"]

class Api(object):

  def getMessages(self, user, filters=None, json=True):

    #if you put {} as default parameters, wierd shit may happen
    filters = filters or {}
    after   = filters.get("after")
    before  = filters.get("before")
    count   = filters.get("count", 10)
    msgType = filters.get("type")

    messages = Message.objects.filter(conversation__user=user)

    if after:
      messages = messages.filter(created__gt=after)

    if before:
      messages = messages.filter(created__lt=before)

    if msgType:
      messages = messages.filter(type=msgType)

    messages = messages.order_by("created")
    messages = messages[messages.count()-count:]

    result = []

    if json:
      for msg in messages:
        result.append(msg.json)

    else:
      result = messages

    return result

  def getAffirmitive(self):

    return {"data": assertions[int(random()*len(assertions))],
            "type": "text"}

  def getNegativeResp(self):

    return {"data": negatives[int(random()*len(negatives))],
            "type": "text"}

  def getChart(self, input):

    return {"data": "chart",
            "type": "js"}

  def getReport(self, data):

    template = loader.get_template("api/table.html").render(data)
    return {"data": template,
            "type": "html"}

  def createMessage(self, conv, data, question=None, save=True):

    message = Message(data=data["data"],\
                      conversation=conv,\
                      type=data["type"],
                      inAnswerTo=question)

    if save:
      message.save()
    else:
      message.created = datetime.datetime.now(tz=utc)

    return message.json

  def parse(self, user, input):

    error = 0
    messages = []

    conv = Conversation.objects.create(user=user)
    question = self.createMessage(conv, {"data": input,\
                                         "type": "text"})["id"]
    message = self.createMessage(conv, self.getAffirmitive(),\
                                   question, save=False)
    messages.append(message)
    url = URL %urllib.quote(input)
    data = requests.get(url).text
    data = json.loads(data)

    report = self.createMessage(conv, self.getReport(data),\
                                  question)
    messages.append(report)

    '''
    if "plot" in input:
      message = self.createMessage(conv, self.getAffirmitive(),\
                                   question, save=False)
      messages.append(message)

      chart = self.createMessage(conv, self.getChart(input), question)
      messages.append(chart)

    elif "report" in input:
      message = self.createMessage(conv, self.getAffirmitive(),\
                                   question, save=False)
      messages.append(message)

      report = self.createMessage(conv, self.getReport(input),\
                                  question)
      messages.append(report)

    else:
      message = self.createMessage(conv, self.getNegativeResp(), question)
      messages.append(message)

      message = self.createMessage(conv, {"data": "Try 'help'",\
                                          "type": "text"},\
                                   question, save=False)

      messages.append(message);
    '''

    return error, messages

  @staticmethod
  def run(methodName, *args):

    api = Api()
    return api.__getattribute__(methodName)(*args)
